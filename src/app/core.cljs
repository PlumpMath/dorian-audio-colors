(ns app.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
    [clojure.string :as str]
    ;[rum]
    [cljsjs.react-bootstrap]
    [reagent.core :as reagent :refer [atom]]
    [inkspot.color :as color]
    [inkspot.color-chart :as cc]
    [goog.dom :as dom]
    [goog.events :as events]
    [cljs.core.async :refer [put! chan <!]]
    [monet.canvas :as canvas]
  )
)

(enable-console-print!)
(defn p [& text] (.log js/console (str/join " " text)))

; (defn l_to_rgb [l]
;
; (comment
;   void spectral_color(double &r,double &g,double &b,double l) // RGB <0,1> <- lambda l <400,700> [nm]
;       {
;       double t;  r=0.0; g=0.0; b=0.0;
;            if ((l>=400.0)&&(l<410.0)) { t=(l-400.0)/(410.0-400.0); r=    +(0.33*t)-(0.20*t*t); }
;       else if ((l>=410.0)&&(l<475.0)) { t=(l-410.0)/(475.0-410.0); r=0.14         -(0.13*t*t); }
;       else if ((l>=545.0)&&(l<595.0)) { t=(l-545.0)/(595.0-545.0); r=    +(1.98*t)-(     t*t); }
;       else if ((l>=595.0)&&(l<650.0)) { t=(l-595.0)/(650.0-595.0); r=0.98+(0.06*t)-(0.40*t*t); }
;       else if ((l>=650.0)&&(l<700.0)) { t=(l-650.0)/(700.0-650.0); r=0.65-(0.84*t)+(0.20*t*t); }
;            if ((l>=415.0)&&(l<475.0)) { t=(l-415.0)/(475.0-415.0); g=             +(0.80*t*t); }
;       else if ((l>=475.0)&&(l<590.0)) { t=(l-475.0)/(590.0-475.0); g=0.8 +(0.76*t)-(0.80*t*t); }
;       else if ((l>=585.0)&&(l<639.0)) { t=(l-585.0)/(639.0-585.0); g=0.84-(0.84*t)           ; }
;            if ((l>=400.0)&&(l<475.0)) { t=(l-400.0)/(475.0-400.0); b=    +(2.20*t)-(1.50*t*t); }
;       else if ((l>=475.0)&&(l<560.0)) { t=(l-475.0)/(560.0-475.0); b=0.7 -(     t)+(0.30*t*t); }
;       }
;   //---------------------------------------------------------------------------
; )
;
; (cond
;   (and (>= l 400.0) (< l 410.0)) (let [t (/ (- l 400.0) (- 410.0 400)) r ] )
; )
;
;
; )

(def cie
  {
    :370 { :r 0.000 :g 0.001 :b 0.003 }
    :371 { :r 0.000 :g 0.001 :b 0.003 }
    :372 { :r 0.000 :g 0.002 :b 0.004 }
    :373 { :r 0.000 :g 0.002 :b 0.004 }
    :374 { :r 0.000 :g 0.002 :b 0.005 }
    :375 { :r 0.000 :g 0.002 :b 0.005 }
    :376 { :r 0.000 :g 0.002 :b 0.006 }
    :377 { :r 0.000 :g 0.003 :b 0.007 }
    :378 { :r 0.000 :g 0.003 :b 0.008 }
    :379 { :r 0.000 :g 0.003 :b 0.009 }
    :380 { :r 0.000 :g 0.004 :b 0.010 }
    :381 { :r 0.000 :g 0.004 :b 0.011 }
    :382 { :r 0.000 :g 0.004 :b 0.012 }
    :383 { :r 0.000 :g 0.005 :b 0.013 }
    :384 { :r 0.000 :g 0.005 :b 0.015 }
    :385 { :r 0.000 :g 0.005 :b 0.016 }
    :386 { :r 0.000 :g 0.006 :b 0.018 }
    :387 { :r 0.000 :g 0.006 :b 0.020 }
    :388 { :r 0.000 :g 0.007 :b 0.022 }
    :389 { :r 0.000 :g 0.007 :b 0.024 }
    :390 { :r 0.000 :g 0.007 :b 0.026 }
    :391 { :r 0.000 :g 0.007 :b 0.029 }
    :392 { :r 0.000 :g 0.008 :b 0.031 }
    :393 { :r 0.000 :g 0.008 :b 0.034 }
    :394 { :r 0.000 :g 0.007 :b 0.037 }
    :395 { :r 0.000 :g 0.007 :b 0.041 }
    :396 { :r 0.000 :g 0.007 :b 0.044 }
    :397 { :r 0.000 :g 0.006 :b 0.048 }
    :398 { :r 0.000 :g 0.005 :b 0.053 }
    :399 { :r 0.000 :g 0.004 :b 0.058 }
    :400 { :r 0.000 :g 0.003 :b 0.063 }
    :401 { :r 0.000 :g 0.002 :b 0.070 }
    :402 { :r 0.009 :g 0.009 :b 1.000 }
    :403 { :r 0.027 :g 0.004 :b 1.000 }
    :404 { :r 0.004 :g 0.000 :b 0.098 }
    :405 { :r 0.007 :g 0.000 :b 0.112 }
    :406 { :r 0.009 :g 0.000 :b 0.127 }
    :407 { :r 0.012 :g 0.000 :b 0.144 }
    :408 { :r 0.015 :g 0.000 :b 0.163 }
    :409 { :r 0.018 :g 0.000 :b 0.185 }
    :410 { :r 0.021 :g 0.000 :b 0.211 }
    :411 { :r 0.023 :g 0.000 :b 0.239 }
    :412 { :r 0.026 :g 0.000 :b 0.270 }
    :413 { :r 0.028 :g 0.000 :b 0.306 }
    :414 { :r 0.030 :g 0.000 :b 0.345 }
    :415 { :r 0.031 :g 0.000 :b 0.388 }
    :416 { :r 0.032 :g 0.000 :b 0.436 }
    :417 { :r 0.032 :g 0.000 :b 0.488 }
    :418 { :r 0.031 :g 0.000 :b 0.544 }
    :419 { :r 0.029 :g 0.000 :b 0.604 }
    :420 { :r 0.027 :g 0.000 :b 0.668 }
    :421 { :r 0.024 :g 0.000 :b 0.736 }
    :422 { :r 0.021 :g 0.000 :b 0.807 }
    :423 { :r 0.017 :g 0.000 :b 0.880 }
    :424 { :r 0.012 :g 0.000 :b 0.956 }
    :425 { :r 0.007 :g 0.000 :b 1.000 }
    :426 { :r 0.003 :g 0.000 :b 1.000 }
    :427 { :r 0.000 :g 0.001 :b 1.000 }
    :428 { :r 0.000 :g 0.004 :b 1.000 }
    :429 { :r 0.000 :g 0.007 :b 1.000 }
    :430 { :r 0.000 :g 0.008 :b 1.000 }
    :431 { :r 0.000 :g 0.009 :b 1.000 }
    :432 { :r 0.000 :g 0.009 :b 1.000 }
    :433 { :r 0.000 :g 0.008 :b 1.000 }
    :434 { :r 0.000 :g 0.006 :b 1.000 }
    :435 { :r 0.000 :g 0.003 :b 1.000 }
    :436 { :r 0.001 :g 0.000 :b 1.000 }
    :437 { :r 0.005 :g 0.000 :b 1.000 }
    :438 { :r 0.009 :g 0.000 :b 1.000 }
    :439 { :r 0.011 :g 0.000 :b 1.000 }
    :440 { :r 0.011 :g 0.000 :b 1.000 }
    :441 { :r 0.009 :g 0.000 :b 1.000 }
    :442 { :r 0.006 :g 0.001 :b 1.000 }
    :443 { :r 0.003 :g 0.002 :b 1.000 }
    :444 { :r 0.000 :g 0.005 :b 1.000 }
    :445 { :r 0.000 :g 0.010 :b 1.000 }
    :446 { :r 0.000 :g 0.016 :b 1.000 }
    :447 { :r 0.000 :g 0.023 :b 1.000 }
    :448 { :r 0.000 :g 0.029 :b 1.000 }
    :449 { :r 0.000 :g 0.036 :b 1.000 }
    :450 { :r 0.000 :g 0.044 :b 1.000 }
    :451 { :r 0.000 :g 0.051 :b 1.000 }
    :452 { :r 0.000 :g 0.059 :b 1.000 }
    :453 { :r 0.000 :g 0.068 :b 1.000 }
    :454 { :r 0.000 :g 0.076 :b 1.000 }
    :455 { :r 0.000 :g 0.085 :b 1.000 }
    :456 { :r 0.000 :g 0.094 :b 1.000 }
    :457 { :r 0.000 :g 0.104 :b 1.000 }
    :458 { :r 0.000 :g 0.113 :b 1.000 }
    :459 { :r 0.000 :g 0.123 :b 1.000 }
    :460 { :r 0.000 :g 0.134 :b 1.000 }
    :461 { :r 0.000 :g 0.143 :b 1.000 }
    :462 { :r 0.000 :g 0.153 :b 1.000 }
    :463 { :r 0.000 :g 0.163 :b 1.000 }
    :464 { :r 0.000 :g 0.173 :b 1.000 }
    :465 { :r 0.000 :g 0.183 :b 1.000 }
    :466 { :r 0.000 :g 0.194 :b 1.000 }
    :467 { :r 0.000 :g 0.205 :b 1.000 }
    :468 { :r 0.000 :g 0.216 :b 1.000 }
    :469 { :r 0.000 :g 0.228 :b 1.000 }
    :470 { :r 0.000 :g 0.241 :b 1.000 }
    :471 { :r 0.000 :g 0.255 :b 1.000 }
    :472 { :r 0.000 :g 0.270 :b 1.000 }
    :473 { :r 0.000 :g 0.286 :b 1.000 }
    :474 { :r 0.000 :g 0.303 :b 1.000 }
    :475 { :r 0.000 :g 0.322 :b 1.000 }
    :476 { :r 0.000 :g 0.342 :b 1.000 }
    :477 { :r 0.000 :g 0.364 :b 1.000 }
    :478 { :r 0.000 :g 0.388 :b 1.000 }
    :479 { :r 0.000 :g 0.414 :b 1.000 }
    :480 { :r 0.000 :g 0.441 :b 1.000 }
    :481 { :r 0.000 :g 0.471 :b 1.000 }
    :482 { :r 0.000 :g 0.500 :b 0.994 }
    :483 { :r 0.000 :g 0.515 :b 0.960 }
    :484 { :r 0.000 :g 0.531 :b 0.929 }
    :485 { :r 0.000 :g 0.548 :b 0.899 }
    :486 { :r 0.000 :g 0.566 :b 0.872 }
    :487 { :r 0.000 :g 0.584 :b 0.847 }
    :488 { :r 0.000 :g 0.604 :b 0.824 }
    :489 { :r 0.000 :g 0.623 :b 0.802 }
    :490 { :r 0.000 :g 0.644 :b 0.783 }
    :491 { :r 0.000 :g 0.665 :b 0.765 }
    :492 { :r 0.000 :g 0.687 :b 0.749 }
    :493 { :r 0.000 :g 0.709 :b 0.734 }
    :494 { :r 0.000 :g 0.732 :b 0.721 }
    :495 { :r 0.000 :g 0.756 :b 0.708 }
    :496 { :r 0.000 :g 0.780 :b 0.697 }
    :497 { :r 0.000 :g 0.804 :b 0.686 }
    :498 { :r 0.000 :g 0.829 :b 0.677 }
    :499 { :r 0.000 :g 0.855 :b 0.668 }
    :500 { :r 0.000 :g 0.881 :b 0.659 }
    :501 { :r 0.000 :g 0.907 :b 0.652 }
    :502 { :r 0.000 :g 0.934 :b 0.644 }
    :503 { :r 0.000 :g 0.962 :b 0.638 }
    :504 { :r 0.000 :g 0.990 :b 0.631 }
    :505 { :r 0.000 :g 1.000 :b 0.614 }
    :506 { :r 0.000 :g 1.000 :b 0.591 }
    :507 { :r 0.000 :g 1.000 :b 0.570 }
    :508 { :r 0.000 :g 1.000 :b 0.550 }
    :509 { :r 0.000 :g 1.000 :b 0.532 }
    :510 { :r 0.000 :g 1.000 :b 0.514 }
    :511 { :r 0.000 :g 1.000 :b 0.497 }
    :512 { :r 0.000 :g 1.000 :b 0.481 }
    :513 { :r 0.000 :g 1.000 :b 0.465 }
    :514 { :r 0.000 :g 1.000 :b 0.451 }
    :515 { :r 0.000 :g 1.000 :b 0.437 }
    :516 { :r 0.000 :g 1.000 :b 0.424 }
    :517 { :r 0.000 :g 1.000 :b 0.411 }
    :518 { :r 0.000 :g 1.000 :b 0.399 }
    :519 { :r 0.000 :g 1.000 :b 0.387 }
    :520 { :r 0.000 :g 1.000 :b 0.376 }
    :521 { :r 0.000 :g 1.000 :b 0.364 }
    :522 { :r 0.000 :g 1.000 :b 0.354 }
    :523 { :r 0.000 :g 1.000 :b 0.343 }
    :524 { :r 0.000 :g 1.000 :b 0.332 }
    :525 { :r 0.000 :g 1.000 :b 0.321 }
    :526 { :r 0.000 :g 1.000 :b 0.311 }
    :527 { :r 0.000 :g 1.000 :b 0.300 }
    :528 { :r 0.000 :g 1.000 :b 0.289 }
    :529 { :r 0.000 :g 1.000 :b 0.278 }
    :530 { :r 0.000 :g 1.000 :b 0.266 }
    :531 { :r 0.000 :g 1.000 :b 0.254 }
    :532 { :r 0.000 :g 1.000 :b 0.242 }
    :533 { :r 0.000 :g 1.000 :b 0.229 }
    :534 { :r 0.000 :g 1.000 :b 0.215 }
    :535 { :r 0.000 :g 1.000 :b 0.201 }
    :536 { :r 0.000 :g 1.000 :b 0.187 }
    :537 { :r 0.000 :g 1.000 :b 0.171 }
    :538 { :r 0.000 :g 1.000 :b 0.155 }
    :539 { :r 0.000 :g 1.000 :b 0.138 }
    :540 { :r 0.000 :g 1.000 :b 0.120 }
    :541 { :r 0.000 :g 1.000 :b 0.101 }
    :542 { :r 0.000 :g 1.000 :b 0.080 }
    :543 { :r 0.000 :g 1.000 :b 0.058 }
    :544 { :r 0.000 :g 1.000 :b 0.034 }
    :545 { :r 0.000 :g 1.000 :b 0.008 }
    :546 { :r 0.019 :g 1.000 :b 0.000 }
    :547 { :r 0.047 :g 1.000 :b 0.000 }
    :548 { :r 0.076 :g 1.000 :b 0.000 }
    :549 { :r 0.106 :g 1.000 :b 0.000 }
    :550 { :r 0.137 :g 1.000 :b 0.000 }
    :551 { :r 0.169 :g 1.000 :b 0.000 }
    :552 { :r 0.201 :g 1.000 :b 0.000 }
    :553 { :r 0.235 :g 1.000 :b 0.000 }
    :554 { :r 0.270 :g 1.000 :b 0.000 }
    :555 { :r 0.306 :g 1.000 :b 0.000 }
    :556 { :r 0.343 :g 1.000 :b 0.000 }
    :557 { :r 0.381 :g 1.000 :b 0.000 }
    :558 { :r 0.421 :g 1.000 :b 0.000 }
    :559 { :r 0.462 :g 1.000 :b 0.000 }
    :560 { :r 0.505 :g 1.000 :b 0.000 }
    :561 { :r 0.549 :g 1.000 :b 0.000 }
    :562 { :r 0.594 :g 1.000 :b 0.000 }
    :563 { :r 0.641 :g 1.000 :b 0.000 }
    :564 { :r 0.690 :g 1.000 :b 0.000 }
    :565 { :r 0.740 :g 1.000 :b 0.000 }
    :566 { :r 0.792 :g 1.000 :b 0.000 }
    :567 { :r 0.846 :g 1.000 :b 0.000 }
    :568 { :r 0.901 :g 0.998 :b 0.000 }
    :569 { :r 0.943 :g 0.982 :b 0.000 }
    :570 { :r 0.985 :g 0.966 :b 0.000 }
    :571 { :r 1.000 :g 0.924 :b 0.000 }
    :572 { :r 1.000 :g 0.871 :b 0.000 }
    :573 { :r 1.000 :g 0.822 :b 0.000 }
    :574 { :r 1.000 :g 0.777 :b 0.000 }
    :575 { :r 1.000 :g 0.735 :b 0.000 }
    :576 { :r 1.000 :g 0.696 :b 0.000 }
    :577 { :r 1.000 :g 0.659 :b 0.000 }
    :578 { :r 1.000 :g 0.624 :b 0.000 }
    :579 { :r 1.000 :g 0.592 :b 0.000 }
    :580 { :r 1.000 :g 0.561 :b 0.000 }
    :581 { :r 1.000 :g 0.532 :b 0.000 }
    :582 { :r 1.000 :g 0.505 :b 0.000 }
    :583 { :r 1.000 :g 0.479 :b 0.000 }
    :584 { :r 1.000 :g 0.455 :b 0.000 }
    :585 { :r 1.000 :g 0.432 :b 0.000 }
    :586 { :r 1.000 :g 0.410 :b 0.000 }
    :587 { :r 1.000 :g 0.389 :b 0.000 }
    :588 { :r 1.000 :g 0.370 :b 0.000 }
    :589 { :r 1.000 :g 0.351 :b 0.000 }
    :590 { :r 1.000 :g 0.333 :b 0.000 }
    :591 { :r 1.000 :g 0.316 :b 0.000 }
    :592 { :r 1.000 :g 0.300 :b 0.000 }
    :593 { :r 1.000 :g 0.285 :b 0.000 }
    :594 { :r 1.000 :g 0.270 :b 0.000 }
    :595 { :r 1.000 :g 0.256 :b 0.000 }
    :596 { :r 1.000 :g 0.242 :b 0.000 }
    :597 { :r 1.000 :g 0.229 :b 0.000 }
    :598 { :r 1.000 :g 0.217 :b 0.000 }
    :599 { :r 1.000 :g 0.205 :b 0.000 }
    :600 { :r 1.000 :g 0.193 :b 0.000 }
    :601 { :r 1.000 :g 0.183 :b 0.000 }
    :602 { :r 1.000 :g 0.172 :b 0.000 }
    :603 { :r 1.000 :g 0.163 :b 0.000 }
    :604 { :r 1.000 :g 0.154 :b 0.000 }
    :605 { :r 1.000 :g 0.145 :b 0.000 }
    :606 { :r 1.000 :g 0.137 :b 0.000 }
    :607 { :r 1.000 :g 0.129 :b 0.000 }
    :608 { :r 1.000 :g 0.122 :b 0.000 }
    :609 { :r 1.000 :g 0.115 :b 0.000 }
    :610 { :r 1.000 :g 0.108 :b 0.000 }
    :611 { :r 1.000 :g 0.102 :b 0.000 }
    :612 { :r 1.000 :g 0.096 :b 0.000 }
    :613 { :r 1.000 :g 0.090 :b 0.000 }
    :614 { :r 1.000 :g 0.085 :b 0.000 }
    :615 { :r 1.000 :g 0.080 :b 0.000 }
    :616 { :r 1.000 :g 0.075 :b 0.000 }
    :617 { :r 1.000 :g 0.071 :b 0.000 }
    :618 { :r 1.000 :g 0.066 :b 0.000 }
    :619 { :r 1.000 :g 0.062 :b 0.000 }
    :620 { :r 1.000 :g 0.058 :b 0.000 }
    :621 { :r 1.000 :g 0.055 :b 0.000 }
    :622 { :r 1.000 :g 0.051 :b 0.000 }
    :623 { :r 1.000 :g 0.048 :b 0.000 }
    :624 { :r 1.000 :g 0.045 :b 0.000 }
    :625 { :r 1.000 :g 0.043 :b 0.000 }
    :626 { :r 1.000 :g 0.040 :b 0.000 }
    :627 { :r 1.000 :g 0.037 :b 0.000 }
    :628 { :r 1.000 :g 0.035 :b 0.000 }
    :629 { :r 1.000 :g 0.033 :b 0.000 }
    :630 { :r 1.000 :g 0.031 :b 0.000 }
    :631 { :r 1.000 :g 0.029 :b 0.000 }
    :632 { :r 1.000 :g 0.028 :b 0.000 }
    :633 { :r 1.000 :g 0.026 :b 0.000 }
    :634 { :r 1.000 :g 0.025 :b 0.000 }
    :635 { :r 1.000 :g 0.023 :b 0.000 }
    :636 { :r 1.000 :g 0.022 :b 0.000 }
    :637 { :r 1.000 :g 0.021 :b 0.000 }
    :638 { :r 0.969 :g 0.020 :b 0.000 }
    :639 { :r 0.931 :g 0.019 :b 0.000 }
    :640 { :r 0.894 :g 0.017 :b 0.000 }
    :641 { :r 0.857 :g 0.016 :b 0.000 }
    :642 { :r 0.821 :g 0.015 :b 0.000 }
    :643 { :r 0.785 :g 0.014 :b 0.000 }
    :644 { :r 0.750 :g 0.014 :b 0.000 }
    :645 { :r 0.716 :g 0.013 :b 0.000 }
    :646 { :r 0.682 :g 0.013 :b 0.000 }
    :647 { :r 0.650 :g 0.012 :b 0.000 }
    :648 { :r 0.618 :g 0.012 :b 0.000 }
    :649 { :r 0.587 :g 0.012 :b 0.000 }
    :650 { :r 0.557 :g 0.012 :b 0.000 }
    :651 { :r 0.528 :g 0.011 :b 0.000 }
    :652 { :r 0.500 :g 0.011 :b 0.000 }
    :653 { :r 0.473 :g 0.011 :b 0.000 }
    :654 { :r 0.447 :g 0.011 :b 0.000 }
    :655 { :r 0.422 :g 0.011 :b 0.000 }
    :656 { :r 0.398 :g 0.011 :b 0.000 }
    :657 { :r 0.375 :g 0.011 :b 0.000 }
    :658 { :r 0.352 :g 0.011 :b 0.000 }
    :659 { :r 0.331 :g 0.011 :b 0.000 }
    :660 { :r 0.311 :g 0.011 :b 0.000 }
    :661 { :r 0.291 :g 0.011 :b 0.000 }
    :662 { :r 0.273 :g 0.011 :b 0.000 }
    :663 { :r 0.255 :g 0.011 :b 0.000 }
    :664 { :r 0.238 :g 0.011 :b 0.000 }
    :665 { :r 0.222 :g 0.011 :b 0.000 }
    :666 { :r 0.207 :g 0.011 :b 0.000 }
    :667 { :r 0.193 :g 0.011 :b 0.000 }
    :668 { :r 0.180 :g 0.010 :b 0.000 }
    :669 { :r 0.167 :g 0.010 :b 0.000 }
    :670 { :r 0.155 :g 0.010 :b 0.000 }
    :671 { :r 0.143 :g 0.010 :b 0.000 }
    :672 { :r 0.133 :g 0.010 :b 0.000 }
    :673 { :r 0.123 :g 0.010 :b 0.000 }
    :674 { :r 0.113 :g 0.009 :b 0.000 }
    :675 { :r 0.105 :g 0.009 :b 0.000 }
    :676 { :r 0.096 :g 0.009 :b 0.000 }
    :677 { :r 0.089 :g 0.009 :b 0.000 }
    :678 { :r 0.082 :g 0.009 :b 0.000 }
    :679 { :r 0.075 :g 0.008 :b 0.000 }
    :680 { :r 0.069 :g 0.008 :b 0.000 }
    :681 { :r 0.063 :g 0.008 :b 0.000 }
    :682 { :r 0.058 :g 0.008 :b 0.000 }
    :683 { :r 0.053 :g 0.007 :b 0.000 }
    :684 { :r 0.048 :g 0.007 :b 0.000 }
    :685 { :r 0.044 :g 0.007 :b 0.000 }
    :686 { :r 0.040 :g 0.007 :b 0.000 }
    :687 { :r 0.036 :g 0.006 :b 0.000 }
    :688 { :r 0.033 :g 0.006 :b 0.000 }
    :689 { :r 0.030 :g 0.006 :b 0.000 }
    :690 { :r 0.027 :g 0.006 :b 0.000 }
    :691 { :r 0.024 :g 0.005 :b 0.000 }
    :692 { :r 0.022 :g 0.005 :b 0.000 }
    :693 { :r 0.020 :g 0.005 :b 0.000 }
    :694 { :r 0.018 :g 0.005 :b 0.000 }
    :695 { :r 0.016 :g 0.004 :b 0.000 }
    :696 { :r 0.014 :g 0.004 :b 0.000 }
    :697 { :r 0.013 :g 0.004 :b 0.000 }
    :698 { :r 0.012 :g 0.004 :b 0.000 }
    :699 { :r 0.010 :g 0.003 :b 0.000 }
    :700 { :r 0.009 :g 0.003 :b 0.000 }
    :701 { :r 0.008 :g 0.003 :b 0.000 }
    :702 { :r 0.007 :g 0.003 :b 0.000 }
    :703 { :r 0.007 :g 0.003 :b 0.000 }
    :704 { :r 0.006 :g 0.003 :b 0.000 }
    :705 { :r 0.005 :g 0.002 :b 0.000 }
    :706 { :r 0.005 :g 0.002 :b 0.000 }
    :707 { :r 0.004 :g 0.002 :b 0.000 }
    :708 { :r 0.004 :g 0.002 :b 0.000 }
    :709 { :r 0.003 :g 0.002 :b 0.000 }
    :710 { :r 0.003 :g 0.002 :b 0.000 }
    :711 { :r 0.002 :g 0.002 :b 0.000 }
    :712 { :r 0.002 :g 0.001 :b 0.000 }
    :713 { :r 0.002 :g 0.001 :b 0.000 }
    :714 { :r 0.002 :g 0.001 :b 0.000 }
    :715 { :r 0.001 :g 0.001 :b 0.000 }
    :716 { :r 0.001 :g 0.001 :b 0.000 }
    :717 { :r 0.001 :g 0.001 :b 0.000 }
    :718 { :r 0.001 :g 0.001 :b 0.000 }
    :719 { :r 0.001 :g 0.001 :b 0.000 }
    :720 { :r 0.001 :g 0.001 :b 0.000 }
    :721 { :r 0.001 :g 0.001 :b 0.000 }
    :722 { :r 0.000 :g 0.001 :b 0.000 }
    :723 { :r 0.000 :g 0.001 :b 0.000 }
    :724 { :r 0.000 :g 0.001 :b 0.000 }
    :725 { :r 0.000 :g 0.001 :b 0.000 }
    :726 { :r 0.000 :g 0.000 :b 0.000 }
    :727 { :r 0.000 :g 0.000 :b 0.000 }
    :728 { :r 0.000 :g 0.000 :b 0.000 }
    :729 { :r 0.000 :g 0.000 :b 0.000 }
    :730 { :r 0.000 :g 0.000 :b 0.000 }
    :731 { :r 0.000 :g 0.000 :b 0.000 }
    :732 { :r 0.000 :g 0.000 :b 0.000 }
    :733 { :r 0.000 :g 0.000 :b 0.000 }
    :734 { :r 0.000 :g 0.000 :b 0.000 }
    :735 { :r 0.000 :g 0.000 :b 0.000 }
    :736 { :r 0.000 :g 0.000 :b 0.000 }
    :737 { :r 0.000 :g 0.000 :b 0.000 }
    :738 { :r 0.000 :g 0.000 :b 0.000 }
    :739 { :r 0.000 :g 0.000 :b 0.000 }
    :740 { :r 0.000 :g 0.000 :b 0.000 }
    :741 { :r 0.000 :g 0.000 :b 0.000 }
    :742 { :r 0.000 :g 0.000 :b 0.000 }
    :743 { :r 0.000 :g 0.000 :b 0.000 }
    :744 { :r 0.000 :g 0.000 :b 0.000 }
    :745 { :r 0.000 :g 0.000 :b 0.000 }
    :746 { :r 0.000 :g 0.000 :b 0.000 }
    :747 { :r 0.000 :g 0.000 :b 0.000 }
    :748 { :r 0.000 :g 0.000 :b 0.000 }
    :749 { :r 0.000 :g 0.000 :b 0.000 }
    :750 { :r 0.000 :g 0.000 :b 0.000 }
    :751 { :r 0.000 :g 0.000 :b 0.000 }
    :752 { :r 0.000 :g 0.000 :b 0.000 }
    :753 { :r 0.000 :g 0.000 :b 0.000 }
    :754 { :r 0.000 :g 0.000 :b 0.000 }
    :755 { :r 0.000 :g 0.000 :b 0.000 }
    :756 { :r 0.000 :g 0.000 :b 0.000 }
    :757 { :r 0.000 :g 0.000 :b 0.000 }
    :758 { :r 0.000 :g 0.000 :b 0.000 }
    :759 { :r 0.000 :g 0.000 :b 0.000 }
    :760 { :r 0.000 :g 0.000 :b 0.000 }
  }
)



(defn el [id] (js/document.getElementById id))
(defn del [id]
	(let [c (.. js/document (createElement "DIV"))
		  d (.. js/document (getElementById id) (appendChild c))]
		d
	)
)
(defn cel [content]
	(let [c (.. js/document (createElement "DIV"))]
		(aset c "innerHTML" content)
		c
	)
)

(def pyes (js/React.createElement "p" #js{} "Yes!"))
(def yes (js/React.createElement "div" #js{} pyes))


(def button (.createFactory js/React js/ReactBootstrap.Button))

(def mybutton (button #js{:id "buttonClickMe"} "Click Me"))

(defn divbutton [button] (js/React.createElement "div" #js{} button))
(defn divbutton2 [] (js/React.createElement "div" #js{} mybutton))

(def buttonFactory (.createFactory js/React js/ReactBootstrap.Button))
(def Button (reagent/adapt-react-class buttonFactory))

(def canvas0 (js/document.getElementById "canvas"))
(def context0 (canvas/get-context canvas0 "2d"))

(def canvas1 (js/document.getElementById "canvas1"))
(def context1 (.getContext (js/document.getElementById "canvas1") "2d"))

(def canvas5 (js/document.getElementById "canvas5"))
(def context5 (.getContext (js/document.getElementById (str "canvas5") "2d")))

; (defn getContext [n]
;   (.getContext (js/document.getElementById (str "canvas" n) "2d"))
; )

; (def width canvas1.width)
; (def height canvas1.height)
; (p "width: " canvas1.width)
; (p "height: " canvas1.height)
; (.fillRect context1 0 0 100 100)

(defn convert-color [{:keys [red green blue alpha]}]
  (color/coerce [red green blue (/ alpha 255)])
)

(defn listen [el type]
  (let [out (chan)]
    (events/listen el type
      (fn [e] (put! out e)))
    out
  )
)

(def x380 592.2)
(def x760 56.4)
(def xrange (- x380 x760))
(p "x380:" x380 "x760:" x760 "xrange:" xrange)

(defn xlimits [x]
  (cond
    (< x x760) (+ x xrange)
    (> x x380) (- x xrange)
    :else x
  )
)

(defn wlimits [w]
  (cond
    (< w 3800) (* w 2)
    (> w 7600) (/ w 2)
    :else w
  )
)

(defn xtoa [x] (-> (- 705 x) (/ 705) (* 5000) (+ 3000)))

(defn atox [a]
  (let [x (-> (- 5000 (- a 3000)) (/ 5000) (* 705))]
    ; (cond
    ;   (> x 705) (- x 705)
    ;   (< x 0) (+ x 705)
    ;   :else x
    ; )
    ;(xlimits x)
    x
  )
)

(defn colorx [x]
  (canvas/get-pixel context0 x 120)
)

(p "colorx 380:" (colorx x380))

(defn filln [n color]
  (let [
    context (.getContext (js/document.getElementById (str "canvas" n)) "2d")
    ;color (colorx x)
   ]
    (set! (.-fillStyle context) (convert-color color))
    (.fillRect context 0 0 100 100)
  )
)


(defn dorian [w i]
  "given a root wavelength and an interval in a 7 note just intoned dorian scale, return the interval's wavelength with the root at the center"
  (case (keyword (str i))
    :1 w
    :2 (/ (* w 9) 10)
    :3 (/ (* w 5) 6)
    :4 (/ (* w 3) 4)
    :5 (/ (* w 4) 3)
    :6 (/ (* w 6) 5)
    :7 (/ (* w 10) 9)
    :8 (let [wi (/ w 2)] (do (p "dorian :8 w:" w "wi:" wi) wi))
  )
)

(defn fillem [x w]
  ;(p "fillem")
  (doall (for [i (range 1 9)]
    ;(p (str "wha" i))
    ;(do
      ;(p "i: " i)
      (let [
        wi (wlimits (dorian w i))
        xi (atox wi)
        ;wi 1
        ;xi 1
      ]

        (p "i: " i "wi: " wi "xi: " xi)

        (filln i (colorx xi))

      )

      ;)

    ;nil
  ))
)

(defn mouse-handler [pos]
  (let [
    x (xlimits (:x pos))
    w (xtoa x)
    ; data (.getImageData context0 x 120 1 1)
   ]
   (do
     (p "x: " x "w: " w)
     (fillem x w)
    ;  (aset (.-data data) 1 1.0)
    ;  (.log js/console data)
    ;   (.putImageData context0 data x 120)

   )
    ; (set! (.-fillStyle context5) (convert-color color0))
    ; (.fillRect context1 0 0 100 100)
  )
)

(let [emove (listen (dom/getElement "canvas") "mousemove")]
  (go (while true
    ;(.log js/console (<! clicks))
    (let [ move (<! emove)
           pos {:x (.-clientX move) :y (.-clientY move)} ]
      ;(.log js/console cs)
      ;(.log js/console (.-clientX cs))
      ;(.log js/console (.-clientX cs))
      ;(p "clientX: " (.-clientX cs) "clientY: " (.-clientY cs))
      (mouse-handler pos)
    )
  ))
)

;(def spectrum (js/Image.))
;(defn spectrum.onload [] (.drawImage context spectrum 0 0))
;(defn spectrum.onload [] (.drawImage context spectrum 0 0))

(def sample (.getImageData context0 0 0 1 1))

(defn main []

  (p "main yahoo")
  ;
  ; (doall
  ; (for [l (range 380 761)]
  ;    (do
  ;     ;(p "yippee")
  ;     (let [
  ;       {:keys [:r :g :b]} ((keyword (str l)) cie)
  ;       ;context (.getContext (js/document.getElementById (str "canvas")) "2d")
  ;       ; data (.getImageData context0 l 120 1 1)
  ;     ]
  ;     ;(.log js/console data)
  ;     (aset (.-data sample) 0 (* r 255))
  ;     (aset (.-data sample) 1 (* g 255))
  ;     (aset (.-data sample) 2 (* b 255))
  ;     (aset (.-data sample) 3 255)
  ;     ;(.log js/console sample)
  ;
  ;     (doall (for [r (range 100)]
  ;
  ;       (.putImageData context0 sample (- l 380) r)
  ;
  ;     ))
  ;
  ;     ; (.putImageData context0 sample (- l 380) 0)
  ;     ;  (.putImageData context0 sample (- l 380) 1)
  ;     ;  (.putImageData context0 sample (- l 380) 2)
  ;     ;  (.putImageData context0 sample (- l 380) 3)
  ;       ;(p "l: " l r g b)
  ;
  ;     )
  ;    )
  ; ))


  (defn home-page []
    [:div [:h2 "Welcome to reagent-test"]
     [:div [:a {:href "#/about"} "go to about page"]]
     [:div
      [:p
        ;(reagent/create-element "span" #js{} "Hello ")
        ;(reagent/create-element "span" #js{} "P")
        (reagent/adapt-react-class (button #js{:id "buttonClickMe"} "Click Me!!"))
        (button #js{:id "buttonClickMe"} "Click Me 2!!")
      ]
     ]
    ])
  (reagent/render [home-page] (el "app"))
)
